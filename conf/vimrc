set nocompatible
set incsearch
set ignorecase
set smartcase
set wildmenu
set ruler
set nobackup
set noswapfile
set viewoptions=cursor
set cscopetag
set textwidth=79
set colorcolumn=80,120
set cursorline
set showcmd
set fileencodings=utf-8,chinese,latin-1,gb18030,ucs-bom,gbk,gb2312,big5
set backspace=indent,eol,start
"set cindent
set autoindent
set tabstop=4
set softtabstop=8
set shiftwidth=4
"set expandtab
set noexpandtab
set hls
set encoding=utf-8
set listchars=tab:>-,trail:-
set cinoptions=t0,g1,h1,N-s,j1
set smarttab
set nowrap
set number
set hlsearch
set formatoptions=tcqlron
set foldmethod=syntax
set nofoldenable
set tabstop=8
set shiftwidth=8
set cc=120
"set list
"set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
set mouse=n
set history=1024

":version
":edit filename
"vim one.c two.c three.c
":next :wnext :next!
":args
":previous
":wprevious :previous!
"CTRL-^
":split CTRL-W w
":close :only
":split two.c
":new
"CTRL-W +/-
":resize +N
":vsplit two.c
":vertical resize +50
":vnew
":qall quit all windows
":wall     write all windows
":wqall    write and quit all windows
":qall!    quit all windows discard all changes

":tab split
"gt               Go to the next Tab page
"{count}gt        Go to tab page {count}.  The first tab page has number one.
"gT               Go to the previous Tab page
" http://vimdoc.sourceforge.net/htmldoc/tabpage.html#tab-page

":mksession ~/.vim/sessions/tmp.vim
":mksession ~/.vim/sessions/foo.vim
":source ~/.vim/sessions/tmp.vim
":h startify
":h startify-faq
":SLoad       load a session    |startify-:SLoad|
":SSave[!]    save a session    |startify-:SSave|
":SDelete[!]  delete a session  |startify-:SDelete|
":SClose      close a session   |startify-:SClose|

"CTRL-W h	move to the window on the left
"CTRL-W j	move to the window below
"CTRL-W k	move to the window above
"CTRL-W l	move to the window on the right
"CTRL-W t	move to the TOP window
"CTRL-W b	move to the BOTTOM window

colorscheme desert
syntax enable
filetype off
filetype plugin indent on

au BufWinLeave ?* mkview
au VimEnter ?* silent loadview
au BufRead,BufNewFile *.testsuite* setfiletype xml
highlight ExtraWhitespace ctermbg=red guibg=red
highlight overlength ctermbg=red ctermfg=white guibg=#592929
highlight Search ctermbg=yellow ctermfg=black 
highlight IncSearch ctermbg=black ctermfg=yellow 
highlight MatchParen cterm=underline ctermbg=NONE ctermfg=NONE
match overlength /\%80v.\+/

match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches() " for performance

if has("cscope")
set cscopetag
"set csprg=/usr/bin/cscope
set csprg=/usr/local/bin/cscope
set csto=0
set cst
set nocsverb
if filereadable("cscope.out")
cs add cscope.out
elseif $CSCOPE_DB != ""
cs add $CSCOPE_DB
endif
set csverb
endif

" cscope –Rbqk


"s: 查找C语言符号，即查找函数名、宏、枚举值等出现的地方
"g: 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能
"d: 查找本函数调用的函数
"c: 查找调用本函数的函数
"t: 查找指定的字符串
"e: 查找egrep模式，相当于egrep功能，但查找速度快多了
"f: 查找并打开文件，类似vim的find功能
"i: 查找包含本文件的文件

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>

imap <silent> <leader>so Signed-off-by: Like Xu <like.xu@linux.intel.com><Esc>
imap <silent> <leader>to Tested-by: Like Xu <like.xu@linux.intel.com><Esc>
imap <silent> <leader>rc Reviewed-by: Like Xu <like.xu@linux.intel.com><Esc>
imap <silent> <leader>rc Reviewed-by: Like Xu <like.xu@linux.intel.com><Esc>

" curl -fLo ~/.vim/autoload/plug.vim --create-dirs 
" https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" vim +PlugInstall +qall

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-surround'
Plug 'vim-scripts/c.vim'
Plug 'vim-scripts/a.vim'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'Yggdroot/indentLine'
Plug 'itchyny/lightline.vim'
Plug 'morhetz/gruvbox'
Plug 'ayu-theme/ayu-vim'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'vim-airline/vim-airline'
Plug 'godlygeek/tabular'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'majutsushi/tagbar'
Plug 'Raimondi/delimitMate'
Plug 'airblade/vim-gitgutter'
Plug 'liuchengxu/vista.vim'
Plug 'ternjs/tern_for_vim'
Plug 'mhinz/vim-startify'

"Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
"Plug 'lervag/vimtex'
"Plug 'baskerville/bspwm'
"Plug 'SirVer/ultisnips'
"Plug 'fatih/vim-go'
"Plug 'jnwhiteh/vim-golang'
"Plug 'rust-lang/rust.vim'
"Plug 'joshdick/onedark.vim'
"Plug 'TaDaa/vimade'
" gbdmgr
" https://github.com/LCTT/TranslateProject/blob/e877d93d05d39cb2ef24294afcd02e5db651425b/published/201407/20140607%20How%20to%20turn%20Vim%20into%20a%20full-fledged%20IDE.md
" https://github.com/tpope/vim-obsession
" https://github.com/mhinz/vim-startify
" https://github.com/xolox/vim-session

call plug#end()

" IRC: #vim-china
" VIM table editor
" vimtex
" https://github.com/wsdjeg/vim-galore-zh_cn
" https://github.com/shime/vim-livedown
" https://github.com/shiracamus/vim-syntax-x86-objdump-d
" https://github.com/yangyangwithgnu/use_vim_as_ide/blob/master/.vimrc
" http://feihu.me/blog/2014/intro-to-vim/
" https://www.v2ex.com/t/323860
" http://www.viemu.com/

"vim -o file1 file2 ...
"vim -O file1 file2 ...

nmap <F3> :tab split <CR>
nmap <F2> :NERDTreeToggle<CR>
nmap <F1> :TagbarToggle<CR>

autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

let g:NERDTreeWinSize=30
let g:tagbar_width=75
let g:tagbar_autofocus=1
let g:tagbar_right = 1

" find "." -name "*.[chsS]" -print | sed 's,^\./,,' > "./cscope.files"
" cscope -b -i"./cscope.files"
" :qa
" :!rspec spec/models/code_spec.rb
" :sort
" :'<,'> normal .
" dd ：删除当前行；5dd ：删除当前行开始的5行； 
" dG ：删除当前行至最后一行的所以行

" 按 Esc 切换到正常模式
" 把光标移到你需要复制的代码行首； 
" 按 V 选择整行，可移动光标选择多行； 
" 按 d 剪切或按 y 复制选择的代码； 
" 移动光标到你需要粘贴的位置，按 p 粘贴代码到光标后的位置，或按 P 粘贴到光标前。

" 在使用 Vim 或其他编辑器的时候，你可能经常需要对某些修改进行撤销或重做。
" 在 Vim 中，你可以切换到正常模式，按 u 来撤销操作，按 Ctrl+r 来重做。

" 按 Ctrl+v 切换到可视化模式； 
" 移动光标(j 或 k)选中需要注释的行的开头； 
" 按大写 I，然后输入注释符，如 #； 最后按 Esc。
" 按 Ctrl+v 切换到可视化模式； 
" 按 j 或 k 选择要删除的注释符； 
" 按 d 或 x 删除注释符

" :read readme.md
" :read !ls -l

" 切换到正常模式，输入 g; 来即可切换到上次修改的位置。
" 输入 gg 返回文件顶部，输入 G 返回文件底部。

" :s/foo/bar/g
" :%s/foo/bar/g

"i → Insert 模式，按 ESC 回到 Normal 模式.
"x → 删当前光标所在的一个字符。
":wq → 存盘 + 退出 (:w 存盘, :q 退出)
"dd → 删除当前行，并把删除的行存到剪贴板里
"p → 粘贴剪贴板
"hjkl ->光标键 (←↓↑→)

"a → 在光标后插入
"o → 在当前行后插入一个新行
"O → 在当前行前插入一个新行
"cw → 替换从光标所在位置后到一个单词结尾的字符

"0 → 数字零，到行头
"^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换 行，回车等）
"$ → 到本行行尾
"g_ → 到本行最后一个不是blank字符的位置。

"P → 粘贴（p/P都可以，p是表示在当前位置之后，P表示在当前位置 之前）
"yy → 拷贝当前行
"u：撤销
"<C-r> → redo

":e <path/to/file> → 打
":w → 存盘
":saveas <path/to/file> → 另存为 <path/to/file>
":bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个 或上一个文件

". → (小数点) 可重复
"N<command> → 重复某个命令N次

"NG → 到第 N 行 （另外: N 到第N行，如 :137 到第137行
"gg → 到第一行。（相当于1G，或 :1）
"G → 到最后一行。
"w → 到下一个单词的开头。
"e → 到下一个单词的结尾。
"% : 匹配括号移动，包括 (, {, [.
"#: 匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是 上一个）

"0 → 到行头
"^ → 到本行的第一个非blank字符
"$ → 到行尾
"g_ → 到本行最后一个不是blank字符的位置。
"fa → 到下一个为a的字符处，你也可以fs到下一个为s的字符。
"t, → 到逗号前的第一个字符。逗号可以变成其它字符。
"3fa → 在当前行查找第三个出现的a。
"F 和 T → 和 f 和 t 一样，只不过是相反方向。

"按v启用可视模式，可以按单个字符选择内容，移动光标可以选择。
"按V启用可视模式，立刻选中光标所在行，按单行符选择内容，移动光标可以选择。
"按CTRL+V启用可视中的列块模式，可以在列方向上选择单个字符，移动光标可以选择
"CTRL+v,启用块可视模式，可以选中某一个矩形块，对于有规律的表格可以用这个功能。

":split → 创建分屏 (:vsplit创建垂直分屏)
"<C-w><dir> : dir就是方向，可以是 hjkl 或是 ←↓↑→ 中的一个，其用来选择分屏。
"<C-w>_ (或 <C-w>|) : 最大化尺寸 (<C-w>| 垂直分屏)
"<C-w>+ (或 <C-w>-) : 增加尺寸

" :Gblame

noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>