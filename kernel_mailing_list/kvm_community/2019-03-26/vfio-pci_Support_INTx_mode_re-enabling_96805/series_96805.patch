From patchwork Tue Mar 26 07:41:29 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Leo Yan <leo.yan@linaro.org>
X-Patchwork-Id: 10870565
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id D19B514DE
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 26 Mar 2019 07:42:16 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C06EE2908C
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 26 Mar 2019 07:42:16 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id B4A99290C0; Tue, 26 Mar 2019 07:42:16 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham
	version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 612AF290BB
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 26 Mar 2019 07:42:16 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1730996AbfCZHmP (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Tue, 26 Mar 2019 03:42:15 -0400
Received: from mail-yw1-f67.google.com ([209.85.161.67]:42578 "EHLO
        mail-yw1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730751AbfCZHmP (ORCPT <rfc822;kvm@vger.kernel.org>);
        Tue, 26 Mar 2019 03:42:15 -0400
Received: by mail-yw1-f67.google.com with SMTP id e76so9048959ywa.9
        for <kvm@vger.kernel.org>; Tue, 26 Mar 2019 00:42:14 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=8zy8DbTtrI/GPk3ZP/j95yq3Ew8i2RCl08B9bD5vApI=;
        b=PgTcW/rDulHZ9I26+2Temm/RM9mrMGEEg1hOle3PwkqxK2IxM/mL0bXJHRIXcizoAM
         eCD1ZSLeFb+dyVi2odoYl50fw3mV5WkEoPXn1cJLWZ7i/aiJBGQc0qXL1XgBXPzIsF78
         xMcfe7WU4VWa7k9N8RFbmRmAUJM5mxNxGMkOPc7sp6Vs38QGtRGss6F4/oeVY+PkR/C6
         RcJmpUFC6kch0RFwkaRb+me/tBu9ZeK45wVleJL2yzDz/eem22wrZAR4TsTr6z2gjXZ2
         RrtwZo/V4Zk6AJoeSJZ5mPuASMmtCs+bsJ/trxBl8PNaIUf/7bvqUpdJHMumTHnMPbwN
         oFqg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references;
        bh=8zy8DbTtrI/GPk3ZP/j95yq3Ew8i2RCl08B9bD5vApI=;
        b=kgPQwkrnlojJbbkUNyOdB5FFBixzF5AhT0SxLCw2Li6/Ljq9UhQKSbMhMvERvuQchY
         Vqyn7SfQDBGBa25G5Bl8zwc1/wdqlipe9b8KOJLd8dW3SdzvRmrEAMmIMLJgMP77t/nf
         YbJ0YMW8/mLtK0+MuBUfwuTOAZseXpEgoWXDV6uYTcbN+5SyASeJuNUNejIgrGGXiNl/
         LWkY40V/8U/BcQEf2gMluxBZXdDm9+FijuMl5KCtxdR2PDQmdgIAlqDb2mJ294B7NTJG
         f/B2M977cxQ1cPE5uZFyLxiyWNUbZ5QUbTNLivEakbtLUk8d6+OiGe95a4g5I+UEm0Bf
         syhQ==
X-Gm-Message-State: APjAAAX5WEpTNkAfbtsWeBKK9bE3Y1tWCofrGwnvo0G240MeAdJV6y4A
        bULc7diYS+1wWRdjXrH1RdV7b9eeJmQ=
X-Google-Smtp-Source: 
 APXvYqyPY3rc3r9FZxEOjl7alLthDGNo9ir8KtIVYCc/isYTucYD1WO5vJXxPQqFyl6p91IzxZltpQ==
X-Received: by 2002:a81:5794:: with SMTP id
 l142mr24313318ywb.195.1553586134148;
        Tue, 26 Mar 2019 00:42:14 -0700 (PDT)
Received: from localhost.localdomain (li931-65.members.linode.com.
 [45.56.113.65])
        by smtp.gmail.com with ESMTPSA id
 143sm6349372ywx.63.2019.03.26.00.42.10
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 26 Mar 2019 00:42:13 -0700 (PDT)
From: Leo Yan <leo.yan@linaro.org>
To: kvm@vger.kernel.org, kvmarm@lists.cs.columbia.edu,
        Will Deacon <will.deacon@arm.com>,
        Marc Zyngier <marc.zyngier@arm.com>,
        Jean-Philippe Brucker <jean-philippe.brucker@arm.com>,
        Eric Auger <eric.auger@redhat.com>,
        Robin Murphy <robin.murphy@arm.com>
Cc: Leo Yan <leo.yan@linaro.org>
Subject: [PATCH kvmtool v3 1/3] vfio-pci: Release INTx's unmask eventfd
 properly
Date: Tue, 26 Mar 2019 15:41:29 +0800
Message-Id: <20190326074131.4284-2-leo.yan@linaro.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20190326074131.4284-1-leo.yan@linaro.org>
References: <20190326074131.4284-1-leo.yan@linaro.org>
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

The PCI device INTx uses event fd 'unmask_fd' to signal the deassertion
of the line from guest to host; but this eventfd isn't released properly
when disable INTx.

This patch firstly adds field 'unmask_fd' in struct vfio_pci_device for
storing unmask eventfd and close it when disable INTx.

Reviewed-by: Jean-Philippe Brucker <jean-philippe.brucker@arm.com>
Signed-off-by: Leo Yan <leo.yan@linaro.org>
---
 include/kvm/vfio.h | 1 +
 vfio/pci.c         | 2 ++
 2 files changed, 3 insertions(+)

diff --git a/include/kvm/vfio.h b/include/kvm/vfio.h
index 60e6c54..28223cf 100644
--- a/include/kvm/vfio.h
+++ b/include/kvm/vfio.h
@@ -74,6 +74,7 @@ struct vfio_pci_device {
 
 	unsigned long			irq_modes;
 	int				intx_fd;
+	int				unmask_fd;
 	unsigned int			intx_gsi;
 	struct vfio_pci_msi_common	msi;
 	struct vfio_pci_msi_common	msix;
diff --git a/vfio/pci.c b/vfio/pci.c
index 03de3c1..5224fee 100644
--- a/vfio/pci.c
+++ b/vfio/pci.c
@@ -1008,6 +1008,7 @@ static void vfio_pci_disable_intx(struct kvm *kvm, struct vfio_device *vdev)
 	irq__del_irqfd(kvm, gsi, pdev->intx_fd);
 
 	close(pdev->intx_fd);
+	close(pdev->unmask_fd);
 }
 
 static int vfio_pci_enable_intx(struct kvm *kvm, struct vfio_device *vdev)
@@ -1095,6 +1096,7 @@ static int vfio_pci_enable_intx(struct kvm *kvm, struct vfio_device *vdev)
 	}
 
 	pdev->intx_fd = trigger_fd;
+	pdev->unmask_fd = unmask_fd;
 	/* Guest is going to ovewrite our irq_line... */
 	pdev->intx_gsi = gsi;
 

From patchwork Tue Mar 26 07:41:30 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Leo Yan <leo.yan@linaro.org>
X-Patchwork-Id: 10870567
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 1DB0514DE
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 26 Mar 2019 07:42:29 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0CCE729083
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 26 Mar 2019 07:42:29 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 00E78290B2; Tue, 26 Mar 2019 07:42:28 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham
	version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A917D29083
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 26 Mar 2019 07:42:20 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731056AbfCZHmT (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Tue, 26 Mar 2019 03:42:19 -0400
Received: from mail-yw1-f65.google.com ([209.85.161.65]:35402 "EHLO
        mail-yw1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1730624AbfCZHmT (ORCPT <rfc822;kvm@vger.kernel.org>);
        Tue, 26 Mar 2019 03:42:19 -0400
Received: by mail-yw1-f65.google.com with SMTP id d132so9073927ywa.2
        for <kvm@vger.kernel.org>; Tue, 26 Mar 2019 00:42:19 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=/Scf5uFCXsx7shTJPTDC0RO9Zgt4ayZ3kTF4uHl0u3k=;
        b=DL1VphqsygyoTZu4apkJ/Z3X7rA9dCh1fd5LioPOSyZrXLojIOzEJoW4EXhGZOZ8vT
         MZXISjrQY9piq0FsBK8xPdc+osQL7wq+L38NZOZkzdnulXZmR9R/YmlEVTePcAKfppfd
         Q0UG1tclnyxYONOSQt+YxdKiD5xvYdcbDVmXB4NqfKV1QI0B5ssyAPYe4rN4KvXrR3iB
         goo6y0ICJQ4cq53H6vkKc9UNhOydH6S+m38rJpfqxNRF7aeccoVLfTT6pkz8zCPGeoIe
         9ldviF7Ra/sBSfzsL/cWu7jS43ArLHYDjAK3amRfADo7+BckrExBnLhC5m0B9uBe5RTZ
         B7qg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references;
        bh=/Scf5uFCXsx7shTJPTDC0RO9Zgt4ayZ3kTF4uHl0u3k=;
        b=ITNSgixigq7gFo2mG6d6MozLIM9o19NVEyA3YiIkPPjNWVoLf0Lr2X9TL4STW/Hkz6
         3xz97HMzhuZbVjkn6dt0N6vAQeYeqSsTY8J5S5jzaRMe1CXEEnc3Z02ijjF48ckWgvkb
         AY63Ffpa7yNA4vrrEGuvRUh+SxB8mT43pgkQse3aDaekFoeBPgBKB0Xq7nYcBbPv8NS0
         DEQaDshq7hVFTXZQnjmvnp9ErEMsgQEvj3/Q+x3GSsB853vne8CIGAUOeeTb7eGO2nyY
         /IcwWkiaVNfx4TX/PA2Gd41x8q/SfXBVGtZPydnEmOQ2tMlys6I9ORuYJQyiJ/eBpYIC
         reMQ==
X-Gm-Message-State: APjAAAVDGI1g2SvA9Wwhkq5ZcMb1dvi9MgX+dW0ksWsQtu0jW9mxf82P
        dXE31RdLjS+iHdpD/xBUJHz4UfR24RY=
X-Google-Smtp-Source: 
 APXvYqxLRq49RMso6qgQ6PwDW9geECfo4PRa4v2sAlqBO+pnCQC+UqsNaPWqDq24Ej7HSTs6DKIidg==
X-Received: by 2002:a25:6151:: with SMTP id
 v78mr24545677ybb.359.1553586138437;
        Tue, 26 Mar 2019 00:42:18 -0700 (PDT)
Received: from localhost.localdomain (li931-65.members.linode.com.
 [45.56.113.65])
        by smtp.gmail.com with ESMTPSA id
 143sm6349372ywx.63.2019.03.26.00.42.14
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 26 Mar 2019 00:42:17 -0700 (PDT)
From: Leo Yan <leo.yan@linaro.org>
To: kvm@vger.kernel.org, kvmarm@lists.cs.columbia.edu,
        Will Deacon <will.deacon@arm.com>,
        Marc Zyngier <marc.zyngier@arm.com>,
        Jean-Philippe Brucker <jean-philippe.brucker@arm.com>,
        Eric Auger <eric.auger@redhat.com>,
        Robin Murphy <robin.murphy@arm.com>
Cc: Leo Yan <leo.yan@linaro.org>
Subject: [PATCH kvmtool v3 2/3] vfio-pci: Add new function for INTx one-time
 initialisation
Date: Tue, 26 Mar 2019 15:41:30 +0800
Message-Id: <20190326074131.4284-3-leo.yan@linaro.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20190326074131.4284-1-leo.yan@linaro.org>
References: <20190326074131.4284-1-leo.yan@linaro.org>
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

To support INTx enabling for multiple times, we need firstly to extract
one-time initialisation and move the related code into a new function
vfio_pci_init_intx(); if later disable and re-enable the INTx, we can
skip these one-time operations.

This patch move below three main operations for INTx one-time
initialisation from function vfio_pci_enable_intx() into function
vfio_pci_init_intx():

- Reserve 2 FDs for INTx;
- Sanity check with ioctl VFIO_DEVICE_GET_IRQ_INFO;
- Setup pdev->intx_gsi.

Suggested-by: Jean-Philippe Brucker <jean-philippe.brucker@arm.com>
Signed-off-by: Leo Yan <leo.yan@linaro.org>
---
 vfio/pci.c | 67 ++++++++++++++++++++++++++++++++----------------------
 1 file changed, 40 insertions(+), 27 deletions(-)

diff --git a/vfio/pci.c b/vfio/pci.c
index 5224fee..3c39844 100644
--- a/vfio/pci.c
+++ b/vfio/pci.c
@@ -1018,30 +1018,7 @@ static int vfio_pci_enable_intx(struct kvm *kvm, struct vfio_device *vdev)
 	struct vfio_irq_eventfd	trigger;
 	struct vfio_irq_eventfd	unmask;
 	struct vfio_pci_device *pdev = &vdev->pci;
-	int gsi = pdev->hdr.irq_line - KVM_IRQ_OFFSET;
-
-	struct vfio_irq_info irq_info = {
-		.argsz = sizeof(irq_info),
-		.index = VFIO_PCI_INTX_IRQ_INDEX,
-	};
-
-	vfio_pci_reserve_irq_fds(2);
-
-	ret = ioctl(vdev->fd, VFIO_DEVICE_GET_IRQ_INFO, &irq_info);
-	if (ret || irq_info.count == 0) {
-		vfio_dev_err(vdev, "no INTx reported by VFIO");
-		return -ENODEV;
-	}
-
-	if (!(irq_info.flags & VFIO_IRQ_INFO_EVENTFD)) {
-		vfio_dev_err(vdev, "interrupt not eventfd capable");
-		return -EINVAL;
-	}
-
-	if (!(irq_info.flags & VFIO_IRQ_INFO_AUTOMASKED)) {
-		vfio_dev_err(vdev, "INTx interrupt not AUTOMASKED");
-		return -EINVAL;
-	}
+	int gsi = pdev->intx_gsi;
 
 	/*
 	 * PCI IRQ is level-triggered, so we use two eventfds. trigger_fd
@@ -1097,8 +1074,6 @@ static int vfio_pci_enable_intx(struct kvm *kvm, struct vfio_device *vdev)
 
 	pdev->intx_fd = trigger_fd;
 	pdev->unmask_fd = unmask_fd;
-	/* Guest is going to ovewrite our irq_line... */
-	pdev->intx_gsi = gsi;
 
 	return 0;
 
@@ -1117,6 +1092,39 @@ err_close:
 	return ret;
 }
 
+static int vfio_pci_init_intx(struct kvm *kvm, struct vfio_device *vdev)
+{
+	int ret;
+	struct vfio_pci_device *pdev = &vdev->pci;
+	struct vfio_irq_info irq_info = {
+		.argsz = sizeof(irq_info),
+		.index = VFIO_PCI_INTX_IRQ_INDEX,
+	};
+
+	vfio_pci_reserve_irq_fds(2);
+
+	ret = ioctl(vdev->fd, VFIO_DEVICE_GET_IRQ_INFO, &irq_info);
+	if (ret || irq_info.count == 0) {
+		vfio_dev_err(vdev, "no INTx reported by VFIO");
+		return -ENODEV;
+	}
+
+	if (!(irq_info.flags & VFIO_IRQ_INFO_EVENTFD)) {
+		vfio_dev_err(vdev, "interrupt not eventfd capable");
+		return -EINVAL;
+	}
+
+	if (!(irq_info.flags & VFIO_IRQ_INFO_AUTOMASKED)) {
+		vfio_dev_err(vdev, "INTx interrupt not AUTOMASKED");
+		return -EINVAL;
+	}
+
+	/* Guest is going to ovewrite our irq_line... */
+	pdev->intx_gsi = pdev->hdr.irq_line - KVM_IRQ_OFFSET;
+
+	return 0;
+}
+
 static int vfio_pci_configure_dev_irqs(struct kvm *kvm, struct vfio_device *vdev)
 {
 	int ret = 0;
@@ -1142,8 +1150,13 @@ static int vfio_pci_configure_dev_irqs(struct kvm *kvm, struct vfio_device *vdev
 			return ret;
 	}
 
-	if (pdev->irq_modes & VFIO_PCI_IRQ_MODE_INTX)
+	if (pdev->irq_modes & VFIO_PCI_IRQ_MODE_INTX) {
+		ret = vfio_pci_init_intx(kvm, vdev);
+		if (ret)
+			return ret;
+
 		ret = vfio_pci_enable_intx(kvm, vdev);
+	}
 
 	return ret;
 }

From patchwork Tue Mar 26 07:41:31 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Leo Yan <leo.yan@linaro.org>
X-Patchwork-Id: 10870569
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id A861B15AC
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 26 Mar 2019 07:42:29 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 93BE82907D
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 26 Mar 2019 07:42:29 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 886E6290B2; Tue, 26 Mar 2019 07:42:29 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham
	version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2582D290AF
	for <patchwork-kvm@patchwork.kernel.org>;
 Tue, 26 Mar 2019 07:42:25 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731092AbfCZHmY (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Tue, 26 Mar 2019 03:42:24 -0400
Received: from mail-yw1-f66.google.com ([209.85.161.66]:44243 "EHLO
        mail-yw1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1731059AbfCZHmX (ORCPT <rfc822;kvm@vger.kernel.org>);
        Tue, 26 Mar 2019 03:42:23 -0400
Received: by mail-yw1-f66.google.com with SMTP id c4so9034110ywa.11
        for <kvm@vger.kernel.org>; Tue, 26 Mar 2019 00:42:23 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=d4E5Mc4Tq3LnkwHqTNIvsMvFLCd9vWN20CR1yKE4bE8=;
        b=ednzlGzJ/x+UZvtF8ZheGukTL9bnlwVngXEOTstcskJcTmzc7jUNn2y+4CDeF6ERfz
         2Isg9LRvzkXpw6RlM2x8rMr/H5TBAHmHcg2ONeaFGZ6lebiKS8e8sA6tCselUsHqRuhq
         xCMWLr1rIgxOyf7aObPC/oE3IcGkZRIE4zMhtjfXb9Tmls6hladgXwF1e8Fz3Mib1zK1
         158xakx4ex1ERUae2OxmD3lcUpi5m2LFH8FO1Q2Y7P5kMMNSTlUnUxZ2/OYteXHyHnhU
         sOEPxhrIHUqAcdHbceO3DOBUvG7BstpZP1d2ZyGHQQl4qqb/UGASQPh28aFVD+kh45Pu
         vkgA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references;
        bh=d4E5Mc4Tq3LnkwHqTNIvsMvFLCd9vWN20CR1yKE4bE8=;
        b=MehTVaFQbtgfCg1e5w6TKrs+0dQG9ycHAEO89MPCbM/DRiDzuB4a2CPdx+jO06IPRF
         BuuAOC1znMg410CcnLiJbHZqa3Aqt67nclPdXpGIItGx8akBl11R2VNutvKKHB1spokJ
         HP4B9fvr3T3kAEdaa8WcN9aze8Cd01POC0n3RkeK2nOwAiqYabjddsqCuVHBZeWVfe0L
         zQNQEslRZDlke9XLNrXgocrQe3lFNB2nq84/1NOS19YbDuwhiJuuWzbhnN4hkPHUEqEV
         4XWYK1qoP/SX9ACcmo4J6rhti7uEUCwu1YxhAeuwZrHZbJ3c2stv73SGHJJ801VNB98A
         95Ew==
X-Gm-Message-State: APjAAAV97xMtqX0d1BKQfvewfm7/iCBFfmMhBeJ3Cs3LymP7V7HLqj55
        w5r0e8TYdxn1OnxRup+E3MLIioKQn7s=
X-Google-Smtp-Source: 
 APXvYqxJfoM/Ru4BNsWC6u90znb0x9UiBgcV2+3R+yaO77DAJQeVVMJxwEzysmRyTOZ0voWsPi/08w==
X-Received: by 2002:a25:bac6:: with SMTP id a6mr23009501ybk.151.1553586142567;
        Tue, 26 Mar 2019 00:42:22 -0700 (PDT)
Received: from localhost.localdomain (li931-65.members.linode.com.
 [45.56.113.65])
        by smtp.gmail.com with ESMTPSA id
 143sm6349372ywx.63.2019.03.26.00.42.18
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 26 Mar 2019 00:42:21 -0700 (PDT)
From: Leo Yan <leo.yan@linaro.org>
To: kvm@vger.kernel.org, kvmarm@lists.cs.columbia.edu,
        Will Deacon <will.deacon@arm.com>,
        Marc Zyngier <marc.zyngier@arm.com>,
        Jean-Philippe Brucker <jean-philippe.brucker@arm.com>,
        Eric Auger <eric.auger@redhat.com>,
        Robin Murphy <robin.murphy@arm.com>
Cc: Leo Yan <leo.yan@linaro.org>
Subject: [PATCH kvmtool v3 3/3] vfio-pci: Re-enable INTx mode when disable
 MSI/MSIX
Date: Tue, 26 Mar 2019 15:41:31 +0800
Message-Id: <20190326074131.4284-4-leo.yan@linaro.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20190326074131.4284-1-leo.yan@linaro.org>
References: <20190326074131.4284-1-leo.yan@linaro.org>
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Since PCI forbids enabling INTx, MSI or MSIX at the same time, it's by
default to disable INTx mode when enable MSI/MSIX mode; but this logic is
easily broken if the guest PCI driver detects the MSI/MSIX cannot work as
expected and tries to rollback to use INTx mode.  In this case, the INTx
mode has been disabled and has no chance to re-enable it, thus both INTx
mode and MSI/MSIX mode cannot work in vfio.

Below shows the detailed flow for introducing this issue:

  vfio_pci_configure_dev_irqs()
    `-> vfio_pci_enable_intx()

  vfio_pci_enable_msis()
    `-> vfio_pci_disable_intx()

  vfio_pci_disable_msis()   => Guest PCI driver disables MSI

To fix this issue, when disable MSI/MSIX we need to check if INTx mode
is available for this device or not; if the device can support INTx then
re-enable it so that the device can fallback to use it.

Since vfio_pci_disable_intx() / vfio_pci_enable_intx() pair functions
may be called for multiple times, this patch uses 'intx_fd == -1' to
denote the INTx is disabled, the pair functions can directly bail out
when detect INTx has been disabled and enabled respectively.

Suggested-by: Jean-Philippe Brucker <jean-philippe.brucker@arm.com>
Signed-off-by: Leo Yan <leo.yan@linaro.org>
---
 vfio/pci.c | 41 ++++++++++++++++++++++++++++++-----------
 1 file changed, 30 insertions(+), 11 deletions(-)

diff --git a/vfio/pci.c b/vfio/pci.c
index 3c39844..3b2b1e7 100644
--- a/vfio/pci.c
+++ b/vfio/pci.c
@@ -28,6 +28,7 @@ struct vfio_irq_eventfd {
 	msi_update_state(state, val, VFIO_PCI_MSI_STATE_EMPTY)
 
 static void vfio_pci_disable_intx(struct kvm *kvm, struct vfio_device *vdev);
+static int vfio_pci_enable_intx(struct kvm *kvm, struct vfio_device *vdev);
 
 static int vfio_pci_enable_msis(struct kvm *kvm, struct vfio_device *vdev,
 				bool msix)
@@ -50,17 +51,14 @@ static int vfio_pci_enable_msis(struct kvm *kvm, struct vfio_device *vdev,
 	if (!msi_is_enabled(msis->virt_state))
 		return 0;
 
-	if (pdev->irq_modes & VFIO_PCI_IRQ_MODE_INTX) {
-		/*
-		 * PCI (and VFIO) forbids enabling INTx, MSI or MSIX at the same
-		 * time. Since INTx has to be enabled from the start (we don't
-		 * have a reliable way to know when the user starts using it),
-		 * disable it now.
-		 */
+	/*
+	 * PCI (and VFIO) forbids enabling INTx, MSI or MSIX at the same
+	 * time. Since INTx has to be enabled from the start (after enabling
+	 * 'pdev->intx_fd' will be assigned to an eventfd and doesn't equal
+	 * to the init value -1), disable it now.
+	 */
+	if (pdev->irq_modes & VFIO_PCI_IRQ_MODE_INTX)
 		vfio_pci_disable_intx(kvm, vdev);
-		/* Permanently disable INTx */
-		pdev->irq_modes &= ~VFIO_PCI_IRQ_MODE_INTX;
-	}
 
 	eventfds = (void *)msis->irq_set + sizeof(struct vfio_irq_set);
 
@@ -162,7 +160,16 @@ static int vfio_pci_disable_msis(struct kvm *kvm, struct vfio_device *vdev,
 	msi_set_enabled(msis->phys_state, false);
 	msi_set_empty(msis->phys_state, true);
 
-	return 0;
+	/*
+	 * When MSI or MSIX is disabled, this might be called when
+	 * PCI driver detects the MSI interrupt failure and wants to
+	 * rollback to INTx mode.  Thus enable INTx if the device
+	 * supports INTx mode in this case.
+	 */
+	if (pdev->irq_modes & VFIO_PCI_IRQ_MODE_INTX)
+		ret = vfio_pci_enable_intx(kvm, vdev);
+
+	return ret >= 0 ? 0 : ret;
 }
 
 static int vfio_pci_update_msi_entry(struct kvm *kvm, struct vfio_device *vdev,
@@ -1002,6 +1009,10 @@ static void vfio_pci_disable_intx(struct kvm *kvm, struct vfio_device *vdev)
 		.index	= VFIO_PCI_INTX_IRQ_INDEX,
 	};
 
+	/* INTx mode has been disabled */
+	if (pdev->intx_fd == -1)
+		return;
+
 	pr_debug("user requested MSI, disabling INTx %d", gsi);
 
 	ioctl(vdev->fd, VFIO_DEVICE_SET_IRQS, &irq_set);
@@ -1009,6 +1020,7 @@ static void vfio_pci_disable_intx(struct kvm *kvm, struct vfio_device *vdev)
 
 	close(pdev->intx_fd);
 	close(pdev->unmask_fd);
+	pdev->intx_fd = -1;
 }
 
 static int vfio_pci_enable_intx(struct kvm *kvm, struct vfio_device *vdev)
@@ -1020,6 +1032,10 @@ static int vfio_pci_enable_intx(struct kvm *kvm, struct vfio_device *vdev)
 	struct vfio_pci_device *pdev = &vdev->pci;
 	int gsi = pdev->intx_gsi;
 
+	/* INTx mode has been enabled */
+	if (pdev->intx_fd != -1)
+		return 0;
+
 	/*
 	 * PCI IRQ is level-triggered, so we use two eventfds. trigger_fd
 	 * signals an interrupt from host to guest, and unmask_fd signals the
@@ -1122,6 +1138,9 @@ static int vfio_pci_init_intx(struct kvm *kvm, struct vfio_device *vdev)
 	/* Guest is going to ovewrite our irq_line... */
 	pdev->intx_gsi = pdev->hdr.irq_line - KVM_IRQ_OFFSET;
 
+	/* Use intx_fd = -1 to denote INTx is disabled */
+	pdev->intx_fd = -1;
+
 	return 0;
 }
 
