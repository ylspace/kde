From patchwork Fri Apr  5 22:46:55 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Paolo Bonzini <pbonzini@redhat.com>
X-Patchwork-Id: 10887925
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 2C59D1708
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  5 Apr 2019 22:47:10 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 14029286D5
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  5 Apr 2019 22:47:10 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 072B9286E5; Fri,  5 Apr 2019 22:47:10 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.7 required=2.0 tests=BAYES_00,DKIM_INVALID,
	DKIM_SIGNED,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0634E286D5
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  5 Apr 2019 22:47:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726425AbfDEWrC (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 5 Apr 2019 18:47:02 -0400
Received: from mail-wr1-f65.google.com ([209.85.221.65]:34656 "EHLO
        mail-wr1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726218AbfDEWrB (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 5 Apr 2019 18:47:01 -0400
Received: by mail-wr1-f65.google.com with SMTP id p10so9748814wrq.1;
        Fri, 05 Apr 2019 15:46:59 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=sender:from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=p3D3FHj2GlWOrfpVfWFqRiKyecJhwp7Sph6x9E7wt28=;
        b=DWBorbOi65ADAWyUG7n0f9XnvC18DqU6dIb8IhbMUZfkjit++TnYercaLge9uRBXhp
         w+W76XAO4x/WdhtQJkStUwGWtzZhUEWXzYug+NdhsbxO8Ar/e4HjEsAy0d65sAZZ9zmm
         kVuabpAhvLh06swfImV2LzC/hq4bWC18MJ9foOwDE99PhzgbPUnGtmfaafCCXE/9HTq8
         KpIZCN/V2rI/sEeVT0jF2yQvMYmmf0UY6ZuO1wcNEu+3Jt3290Ywuo0jftvfsLFWAiYT
         lCcQTgyxkIPL99NF4Ctav7QkK0ceW54lXRUIxo0spcJ5ivF+TlBI6AUItKYm1jObLw78
         OgNw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
         :in-reply-to:references;
        bh=p3D3FHj2GlWOrfpVfWFqRiKyecJhwp7Sph6x9E7wt28=;
        b=QeulmQsijgQdzU1d2GOVEINOFsFK0FGOdsD6Bod4FwXt7dR/LGSMj/crOvfXyCer4X
         ARyiUzSXnCkv2D18svBZKnVZoLkN749eKetwOqI+Ag8wzbakXJQb0TNeMsO5y+SDrGnl
         yvRn0pc9tZ07r4zBPQPKwZCMZ3wS+AcYybf3pRLxtK6JqcioRPd/ginNMQ2ar8JHhLMT
         r7p+56GYHYXB9D0dUT/uHc4oY+HFL/yzG9skvehDW0+Q6sT0FelFjfgmln3nKU/6osdM
         Gvn0mdWv0Y9gam14F1KAwf/MKaaaTWUiaeyyC+3V2xHX3iLkEjhBkKpa02eunsYyb9Ss
         2T2w==
X-Gm-Message-State: APjAAAUIwi4443WWLN9J6oBZk8Eiy7ym0c9t+GYMhMktFjRfdJafAb+B
        BFOsKEa3Gl2/NJZXe9Bu2gF3FP3x
X-Google-Smtp-Source: 
 APXvYqwPBdo9Mz8IQO3mKotAnESZ1t0llUYuR5JoAfy2oMj8Hyur8YRIDshoAx8uZAd4ipFSZxaMuQ==
X-Received: by 2002:a5d:6a4f:: with SMTP id
 t15mr10087748wrw.156.1554504418896;
        Fri, 05 Apr 2019 15:46:58 -0700 (PDT)
Received: from 640k.lan ([93.56.166.5])
        by smtp.gmail.com with ESMTPSA id
 7sm81190791wrc.81.2019.04.05.15.46.58
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 05 Apr 2019 15:46:58 -0700 (PDT)
From: Paolo Bonzini <pbonzini@redhat.com>
To: linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Marc Orr <marcorr@google.com>
Subject: [PATCH 1/2] KVM: x86: nVMX: close leak of L0's x2APIC MSRs
 (CVE-2019-3887)
Date: Sat,  6 Apr 2019 00:46:55 +0200
Message-Id: <1554504416-8720-2-git-send-email-pbonzini@redhat.com>
X-Mailer: git-send-email 1.8.3.1
In-Reply-To: <1554504416-8720-1-git-send-email-pbonzini@redhat.com>
References: <1554504416-8720-1-git-send-email-pbonzini@redhat.com>
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

From: Marc Orr <marcorr@google.com>

The nested_vmx_prepare_msr_bitmap() function doesn't directly guard the
x2APIC MSR intercepts with the "virtualize x2APIC mode" MSR. As a
result, we discovered the potential for a buggy or malicious L1 to get
access to L0's x2APIC MSRs, via an L2, as follows.

1. L1 executes WRMSR(IA32_SPEC_CTRL, 1). This causes the spec_ctrl
variable, in nested_vmx_prepare_msr_bitmap() to become true.
2. L1 disables "virtualize x2APIC mode" in VMCS12.
3. L1 enables "APIC-register virtualization" in VMCS12.

Now, KVM will set VMCS02's x2APIC MSR intercepts from VMCS12, and then
set "virtualize x2APIC mode" to 0 in VMCS02. Oops.

This patch closes the leak by explicitly guarding VMCS02's x2APIC MSR
intercepts with VMCS12's "virtualize x2APIC mode" control.

The scenario outlined above and fix prescribed here, were verified with
a related patch in kvm-unit-tests titled "Add leak scenario to
virt_x2apic_mode_test".

Note, it looks like this issue may have been introduced inadvertently
during a merge---see 15303ba5d1cd.

Signed-off-by: Marc Orr <marcorr@google.com>
Reviewed-by: Jim Mattson <jmattson@google.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---
 arch/x86/kvm/vmx/nested.c | 72 +++++++++++++++++++++++++++++------------------
 1 file changed, 44 insertions(+), 28 deletions(-)

diff --git a/arch/x86/kvm/vmx/nested.c b/arch/x86/kvm/vmx/nested.c
index 153e539c29c9..897d70e3d291 100644
--- a/arch/x86/kvm/vmx/nested.c
+++ b/arch/x86/kvm/vmx/nested.c
@@ -500,6 +500,17 @@ static void nested_vmx_disable_intercept_for_msr(unsigned long *msr_bitmap_l1,
 	}
 }
 
+static inline void enable_x2apic_msr_intercepts(unsigned long *msr_bitmap) {
+	int msr;
+
+	for (msr = 0x800; msr <= 0x8ff; msr += BITS_PER_LONG) {
+		unsigned word = msr / BITS_PER_LONG;
+
+		msr_bitmap[word] = ~0;
+		msr_bitmap[word + (0x800 / sizeof(long))] = ~0;
+	}
+}
+
 /*
  * Merge L0's and L1's MSR bitmap, return false to indicate that
  * we do not use the hardware.
@@ -541,39 +552,44 @@ static inline bool nested_vmx_prepare_msr_bitmap(struct kvm_vcpu *vcpu,
 		return false;
 
 	msr_bitmap_l1 = (unsigned long *)kmap(page);
-	if (nested_cpu_has_apic_reg_virt(vmcs12)) {
-		/*
-		 * L0 need not intercept reads for MSRs between 0x800 and 0x8ff, it
-		 * just lets the processor take the value from the virtual-APIC page;
-		 * take those 256 bits directly from the L1 bitmap.
-		 */
-		for (msr = 0x800; msr <= 0x8ff; msr += BITS_PER_LONG) {
-			unsigned word = msr / BITS_PER_LONG;
-			msr_bitmap_l0[word] = msr_bitmap_l1[word];
-			msr_bitmap_l0[word + (0x800 / sizeof(long))] = ~0;
-		}
-	} else {
-		for (msr = 0x800; msr <= 0x8ff; msr += BITS_PER_LONG) {
-			unsigned word = msr / BITS_PER_LONG;
-			msr_bitmap_l0[word] = ~0;
-			msr_bitmap_l0[word + (0x800 / sizeof(long))] = ~0;
-		}
-	}
 
-	nested_vmx_disable_intercept_for_msr(
-		msr_bitmap_l1, msr_bitmap_l0,
-		X2APIC_MSR(APIC_TASKPRI),
-		MSR_TYPE_W);
+	/*
+	 * To keep the control flow simple, pay eight 8-byte writes (sixteen
+	 * 4-byte writes on 32-bit systems) up front to enable intercepts for
+	 * the x2APIC MSR range and selectively disable them below.
+	 */
+	enable_x2apic_msr_intercepts(msr_bitmap_l0);
+
+	if (nested_cpu_has_virt_x2apic_mode(vmcs12)) {
+		if (nested_cpu_has_apic_reg_virt(vmcs12)) {
+			/*
+			 * L0 need not intercept reads for MSRs between 0x800
+			 * and 0x8ff, it just lets the processor take the value
+			 * from the virtual-APIC page; take those 256 bits
+			 * directly from the L1 bitmap.
+			 */
+			for (msr = 0x800; msr <= 0x8ff; msr += BITS_PER_LONG) {
+				unsigned word = msr / BITS_PER_LONG;
+
+				msr_bitmap_l0[word] = msr_bitmap_l1[word];
+			}
+		}
 
-	if (nested_cpu_has_vid(vmcs12)) {
-		nested_vmx_disable_intercept_for_msr(
-			msr_bitmap_l1, msr_bitmap_l0,
-			X2APIC_MSR(APIC_EOI),
-			MSR_TYPE_W);
 		nested_vmx_disable_intercept_for_msr(
 			msr_bitmap_l1, msr_bitmap_l0,
-			X2APIC_MSR(APIC_SELF_IPI),
+			X2APIC_MSR(APIC_TASKPRI),
 			MSR_TYPE_W);
+
+		if (nested_cpu_has_vid(vmcs12)) {
+			nested_vmx_disable_intercept_for_msr(
+				msr_bitmap_l1, msr_bitmap_l0,
+				X2APIC_MSR(APIC_EOI),
+				MSR_TYPE_W);
+			nested_vmx_disable_intercept_for_msr(
+				msr_bitmap_l1, msr_bitmap_l0,
+				X2APIC_MSR(APIC_SELF_IPI),
+				MSR_TYPE_W);
+		}
 	}
 
 	if (spec_ctrl)

From patchwork Fri Apr  5 22:46:56 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Paolo Bonzini <pbonzini@redhat.com>
X-Patchwork-Id: 10887927
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 6041C1708
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  5 Apr 2019 22:47:15 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 497FE286D5
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  5 Apr 2019 22:47:15 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3E466286E5; Fri,  5 Apr 2019 22:47:15 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.7 required=2.0 tests=BAYES_00,DKIM_INVALID,
	DKIM_SIGNED,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DAB79286D5
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri,  5 Apr 2019 22:47:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726575AbfDEWrJ (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 5 Apr 2019 18:47:09 -0400
Received: from mail-wr1-f68.google.com ([209.85.221.68]:34661 "EHLO
        mail-wr1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726531AbfDEWrC (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 5 Apr 2019 18:47:02 -0400
Received: by mail-wr1-f68.google.com with SMTP id p10so9748833wrq.1;
        Fri, 05 Apr 2019 15:47:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=sender:from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=eHbCkhdoOpnF8F/axoSBJ39P2CF2Q6TWQy+leIkw+5c=;
        b=paZEgbl0ANuDUeSLzJfs7pQ1oPQlb/YOXIvvxEfU74A3NrzUQwf1Yc6oScSCvbD+Jj
         3KmO0eKfnNPwt0ZGC8NsmngSU1Ap/FI4zn/Q3nkeEmuSgYrI82VDEs9TDAH4hgqHMPo9
         MNYXbq88Z5UF/azLTqN+eMYGyth6SacvrnjYuiTSCqPTUNkHKErDDJI5RmkbG8cFRQB1
         UEWEK/GznewViPqsGfwYX23jQSZKV5d2TDLMBQ9SfQTBtfe4IrfJQpVnPUSMjtTImSWG
         V2oHCaQ6BfsJi0aUTFT6Ovb288PTBd34dU90NbqyQbIfhwXJCmpOnYAJ8cTlUV29zCZ/
         akJQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
         :in-reply-to:references;
        bh=eHbCkhdoOpnF8F/axoSBJ39P2CF2Q6TWQy+leIkw+5c=;
        b=G+IjQKaMw8JAW96ginxquMqM1JjqUoih2LqX25DHYhTW6OitYtDNLb2a78sBfc0CTp
         AgkcblNBrgapiKp3yBDMf9tRFHU833V6uaSIosvYaoOHeZSAiHeu/6AXuek8i23kdoTE
         DgoP2qNLXGtNwR1PC2DP8/enblv3C167tfA0+zdktHuxWIxRbHWOkP7OZmERv6E1soGL
         P2muB7BexTSBxmpI6pAfM5nEwVv7ajNjeq0ZjmnowP6bYNMXpr8v2qm9btJZHIRlhDJr
         COJT3Sb3lVPXecB10AfqHCsZaTBiQSJT9yPXEaK1/K3+6DL08tHtE572mWlWBa+udNNb
         iYIQ==
X-Gm-Message-State: APjAAAVfJtPqwNmQ6hhzI6CnCBAaf0qiB4FjC4k4awkiE1psCrNQDpw2
        5oihJqRUZDeok2DXmdfH87nUrJaN
X-Google-Smtp-Source: 
 APXvYqzZNWG9stoUbB/7xPZQMf6GOKatODqaThK8bn68OzEh/P/z5nngdZjU2CtcJLb+6M6EFDNdMg==
X-Received: by 2002:adf:db05:: with SMTP id s5mr10428695wri.247.1554504419660;
        Fri, 05 Apr 2019 15:46:59 -0700 (PDT)
Received: from 640k.lan ([93.56.166.5])
        by smtp.gmail.com with ESMTPSA id
 7sm81190791wrc.81.2019.04.05.15.46.58
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 05 Apr 2019 15:46:59 -0700 (PDT)
From: Paolo Bonzini <pbonzini@redhat.com>
To: linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Marc Orr <marcorr@google.com>
Subject: [PATCH 2/2] KVM: x86: nVMX: fix x2APIC VTPR read intercept
Date: Sat,  6 Apr 2019 00:46:56 +0200
Message-Id: <1554504416-8720-3-git-send-email-pbonzini@redhat.com>
X-Mailer: git-send-email 1.8.3.1
In-Reply-To: <1554504416-8720-1-git-send-email-pbonzini@redhat.com>
References: <1554504416-8720-1-git-send-email-pbonzini@redhat.com>
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

From: Marc Orr <marcorr@google.com>

Referring to the "VIRTUALIZING MSR-BASED APIC ACCESSES" chapter of the
SDM, when "virtualize x2APIC mode" is 1 and "APIC-register
virtualization" is 0, a RDMSR of 808H should return the VTPR from the
virtual APIC page.

However, for nested, KVM currently fails to disable the read intercept
for this MSR. This means that a RDMSR exit takes precedence over
"virtualize x2APIC mode", and KVM passes through L1's TPR to L2,
instead of sourcing the value from L2's virtual APIC page.

This patch fixes the issue by disabling the read intercept, in VMCS02,
for the VTPR when "APIC-register virtualization" is 0.

The issue described above and fix prescribed here, were verified with
a related patch in kvm-unit-tests titled "Test VMX's virtualize x2APIC
mode w/ nested".

Signed-off-by: Marc Orr <marcorr@google.com>
Reviewed-by: Jim Mattson <jmattson@google.com>
Fixes: c992384bde84f ("KVM: vmx: speed up MSR bitmap merge")
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---
 arch/x86/kvm/vmx/nested.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/arch/x86/kvm/vmx/nested.c b/arch/x86/kvm/vmx/nested.c
index 897d70e3d291..7ec9bb1dd723 100644
--- a/arch/x86/kvm/vmx/nested.c
+++ b/arch/x86/kvm/vmx/nested.c
@@ -578,7 +578,7 @@ static inline bool nested_vmx_prepare_msr_bitmap(struct kvm_vcpu *vcpu,
 		nested_vmx_disable_intercept_for_msr(
 			msr_bitmap_l1, msr_bitmap_l0,
 			X2APIC_MSR(APIC_TASKPRI),
-			MSR_TYPE_W);
+			MSR_TYPE_R | MSR_TYPE_W);
 
 		if (nested_cpu_has_vid(vmcs12)) {
 			nested_vmx_disable_intercept_for_msr(
