From patchwork Mon Apr  8 01:27:17 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Leo Yan <leo.yan@linaro.org>
X-Patchwork-Id: 10888705
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 228921800
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon,  8 Apr 2019 01:27:53 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0AD3728650
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon,  8 Apr 2019 01:27:53 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id EA30828468; Mon,  8 Apr 2019 01:27:52 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham
	version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 82AA720748
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon,  8 Apr 2019 01:27:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726511AbfDHB1v (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Sun, 7 Apr 2019 21:27:51 -0400
Received: from mail-yb1-f195.google.com ([209.85.219.195]:32834 "EHLO
        mail-yb1-f195.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726412AbfDHB1u (ORCPT <rfc822;kvm@vger.kernel.org>);
        Sun, 7 Apr 2019 21:27:50 -0400
Received: by mail-yb1-f195.google.com with SMTP id i10so4569795ybk.0
        for <kvm@vger.kernel.org>; Sun, 07 Apr 2019 18:27:49 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=7644NDN/UtoV55YslGcHSTFcY4hV/XX8F3phjUCG6BI=;
        b=EWdceTXErKmsHF4tzV20HUylAD2VPtJXLvPKhruBjRvGmGV1nLD5WurnZd83oyZRAv
         hAl6SpBVpnloLMuI0spgNAHxyM4wfxTNF7GnTVjKqnVzsWc7gkxWK+/eQj0VffOlcFAX
         1bdABNPVwsmGuqQtZFOH93EZ7R0iO/7Lk7uXBzzUL+Nb25mjVlm68/irk0sRi6WSTNMQ
         fi/gdlkO22zGlBfig26lZl1hl5RArJV7zNqnYYYunYevfzOqQAef1gXBb364UGkGgA3S
         x5WaR/MnE0hqRmPyNubcO4CynGd41msngqIAgJIJQVT77eZkv3ufcINXCMzRAkaxLuxP
         +EFQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references;
        bh=7644NDN/UtoV55YslGcHSTFcY4hV/XX8F3phjUCG6BI=;
        b=BAp82fjpxnQux7dgNNyNlWQxley4Ilhj7Pj7DtZuMJvWnM9jq2GWKtF5B7l1fU4RxC
         xb71iBrL+NkM+NyRF/3Cmw+FV2Ms9dqzzen4kjuU8fUWlhIyEbw0tNDNBKcLRQ1cOK5/
         MW0fy2K8VxI42RzPrfQh5RcQRFrdTvH5z+IZI5ucSQwh2P44i60sEX27Q0nGR4ETXeTi
         lJ0Bvk5TwjiZOd1oSbEq+qkAozeJLcVC9niqKjIRL0/vWS0D9NXYLzKlOca6EmlqPN8I
         ZDvAxgMC4Dt9qOwOhuV6D1cEBkNbEetYvI6nl65XUk4aUVUWzgW/+wbWdMp5U6qRoB9T
         nVsg==
X-Gm-Message-State: APjAAAXk9XfWlDFM6Vk4OrCK4zWNRSbBLqpJ6Kd0aLRfHAKJZMTGk2Ii
        hdWBpCTIVSp5ceDLYlVRWEFnJn3Kb3TvMmWG
X-Google-Smtp-Source: 
 APXvYqxrKtxmsIkyAQxk6dN2tGa7A4aleY6Uhy5YYj4XxevBbnn9eyIwLKNGsImnIfSqyFl6NfR7gQ==
X-Received: by 2002:a25:260c:: with SMTP id m12mr3949026ybm.300.1554686869046;
        Sun, 07 Apr 2019 18:27:49 -0700 (PDT)
Received: from localhost.localdomain (li931-65.members.linode.com.
 [45.56.113.65])
        by smtp.gmail.com with ESMTPSA id
 190sm10494919ywd.62.2019.04.07.18.27.45
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Sun, 07 Apr 2019 18:27:48 -0700 (PDT)
From: Leo Yan <leo.yan@linaro.org>
To: "kvm@vger.kernel.org" <kvm@vger.kernel.org>,
        "kvmarm@lists.cs.columbia.edu" <kvmarm@lists.cs.columbia.edu>,
        Will Deacon <Will.Deacon@arm.com>,
        Jean-Philippe Brucker <jean-philippe.brucker@arm.com>,
        Marc Zyngier <Marc.Zyngier@arm.com>,
        Eric Auger <eric.auger@redhat.com>,
        Robin Murphy <Robin.Murphy@arm.com>
Cc: Leo Yan <leo.yan@linaro.org>
Subject: [PATCH v4 1/3] vfio-pci: Release INTx's unmask eventfd properly
Date: Mon,  8 Apr 2019 09:27:17 +0800
Message-Id: <20190408012719.16158-2-leo.yan@linaro.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20190408012719.16158-1-leo.yan@linaro.org>
References: <20190408012719.16158-1-leo.yan@linaro.org>
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

The PCI device INTx uses event fd 'unmask_fd' to signal the deassertion
of the line from guest to host; but this eventfd isn't released properly
when disable INTx.

This patch firstly adds field 'unmask_fd' in struct vfio_pci_device for
storing unmask eventfd and close it when disable INTx.

Signed-off-by: Leo Yan <leo.yan@linaro.org>
Reviewed-by: Jean-Philippe Brucker <jean-philippe.brucker@arm.com>
---
 include/kvm/vfio.h | 1 +
 vfio/pci.c         | 2 ++
 2 files changed, 3 insertions(+)

diff --git a/include/kvm/vfio.h b/include/kvm/vfio.h
index 60e6c54..28223cf 100644
--- a/include/kvm/vfio.h
+++ b/include/kvm/vfio.h
@@ -74,6 +74,7 @@ struct vfio_pci_device {
 
 	unsigned long			irq_modes;
 	int				intx_fd;
+	int				unmask_fd;
 	unsigned int			intx_gsi;
 	struct vfio_pci_msi_common	msi;
 	struct vfio_pci_msi_common	msix;
diff --git a/vfio/pci.c b/vfio/pci.c
index 03de3c1..5224fee 100644
--- a/vfio/pci.c
+++ b/vfio/pci.c
@@ -1008,6 +1008,7 @@ static void vfio_pci_disable_intx(struct kvm *kvm, struct vfio_device *vdev)
 	irq__del_irqfd(kvm, gsi, pdev->intx_fd);
 
 	close(pdev->intx_fd);
+	close(pdev->unmask_fd);
 }
 
 static int vfio_pci_enable_intx(struct kvm *kvm, struct vfio_device *vdev)
@@ -1095,6 +1096,7 @@ static int vfio_pci_enable_intx(struct kvm *kvm, struct vfio_device *vdev)
 	}
 
 	pdev->intx_fd = trigger_fd;
+	pdev->unmask_fd = unmask_fd;
 	/* Guest is going to ovewrite our irq_line... */
 	pdev->intx_gsi = gsi;
 

From patchwork Mon Apr  8 01:27:18 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Leo Yan <leo.yan@linaro.org>
X-Patchwork-Id: 10888707
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id EA5EE139A
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon,  8 Apr 2019 01:27:55 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D353828468
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon,  8 Apr 2019 01:27:55 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C75BB2857B; Mon,  8 Apr 2019 01:27:55 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham
	version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5CEE028426
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon,  8 Apr 2019 01:27:55 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726536AbfDHB1y (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Sun, 7 Apr 2019 21:27:54 -0400
Received: from mail-yb1-f193.google.com ([209.85.219.193]:39078 "EHLO
        mail-yb1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726513AbfDHB1y (ORCPT <rfc822;kvm@vger.kernel.org>);
        Sun, 7 Apr 2019 21:27:54 -0400
Received: by mail-yb1-f193.google.com with SMTP id b88so4548143ybi.6
        for <kvm@vger.kernel.org>; Sun, 07 Apr 2019 18:27:53 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=IYBpeb1hM5WGzOAz6a5KnUsnQB8vYOsIsT8q10nvFg8=;
        b=iuvLpJWrwn8S1CnVss1ptsO+9Sh4wQT6s+ei8WPTWj9A8sAAudMxVsJS+qx119P+wY
         IYPo0FFhibgelLiNlTiHUOBnfdAyFnNutfb2hVbxTVA0h+ubxX3eNiMPtxuvvQGCHlDe
         J7ZgZfaroJrrqZQ2bPUeuEkHDwXHEaDdZneMlvYU2LeasXI2A1fJZn3UAc5qbZP3zWlu
         1kxRRC1/h5ITcHKCuKY+oHmLNFrrCzW12D2ZpoiAeMfGTo+ihXqc9hjBwgD0mBmJr5ix
         iVxOVwM/O+1D6ANnhYAJooAxYGXCuVeXRPzjPtCnCfb9Z2/6b2bVYZCQKVyrpH3kVou5
         FSlQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references;
        bh=IYBpeb1hM5WGzOAz6a5KnUsnQB8vYOsIsT8q10nvFg8=;
        b=kyNAedxVho2qNklflC94xNaoQHDilbR3F1f/u9CMlOA6S5qds/YIkL+kidBrS9ogRW
         DgoGnQ0bocFLLBbGK2A6orNefov6chhfEthNAxC+wik+5AgkUKThxsF71e+RlVDDuIin
         uEWM5YjuIVl7n966PTVVime++YMUQ/hyIWo9ZSCApwn1qfe01PQwv7iwLFu0hG8pnQRX
         SUASsjBxNmVoUIKYTKLoRMs1hPrir/1yJDJM+/j0EkGwLUMx/7PAFORBdJjbgitBzRUK
         orooHBMzpWNyUEBOIMRxAwDecJh33vCtXWwHqVDY196dWMFTYgHWpE5Zdl61iDo9Z9uP
         RADg==
X-Gm-Message-State: APjAAAVgAZz5ZkxA0Dg/yFoScjhitVeBHUAEQU+KZarpP/rc3Xoquvks
        w8jrny5AsIo9CBMP6EraswiKXgKkiSC2oHv2
X-Google-Smtp-Source: 
 APXvYqzEwyTO3bYhwpzPsceG2Jd4WA5VG9HW3aLeXM29ct2Vq7Fzlee2snV2YUgiCrAgqWIWU7gYig==
X-Received: by 2002:a25:1e57:: with SMTP id
 e84mr22261328ybe.184.1554686872852;
        Sun, 07 Apr 2019 18:27:52 -0700 (PDT)
Received: from localhost.localdomain (li931-65.members.linode.com.
 [45.56.113.65])
        by smtp.gmail.com with ESMTPSA id
 190sm10494919ywd.62.2019.04.07.18.27.49
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Sun, 07 Apr 2019 18:27:52 -0700 (PDT)
From: Leo Yan <leo.yan@linaro.org>
To: "kvm@vger.kernel.org" <kvm@vger.kernel.org>,
        "kvmarm@lists.cs.columbia.edu" <kvmarm@lists.cs.columbia.edu>,
        Will Deacon <Will.Deacon@arm.com>,
        Jean-Philippe Brucker <jean-philippe.brucker@arm.com>,
        Marc Zyngier <Marc.Zyngier@arm.com>,
        Eric Auger <eric.auger@redhat.com>,
        Robin Murphy <Robin.Murphy@arm.com>
Cc: Leo Yan <leo.yan@linaro.org>
Subject: [PATCH v4 2/3] vfio-pci: Add new function for INTx one-time
 initialisation
Date: Mon,  8 Apr 2019 09:27:18 +0800
Message-Id: <20190408012719.16158-3-leo.yan@linaro.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20190408012719.16158-1-leo.yan@linaro.org>
References: <20190408012719.16158-1-leo.yan@linaro.org>
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

To support INTx enabling for multiple times, we need firstly to extract
one-time initialisation and move the related code into a new function
vfio_pci_init_intx(); if later disable and re-enable the INTx, we can
skip these one-time operations.

This patch move below three main operations for INTx one-time
initialisation from function vfio_pci_enable_intx() into function
vfio_pci_init_intx():

- Reserve 2 FDs for INTx;
- Sanity check with ioctl VFIO_DEVICE_GET_IRQ_INFO;
- Setup pdev->intx_gsi.

Suggested-by: Jean-Philippe Brucker <jean-philippe.brucker@arm.com>
Signed-off-by: Leo Yan <leo.yan@linaro.org>
Reviewed-by: Jean-Philippe Brucker <jean-philippe.brucker@arm.com>
---
 vfio/pci.c | 67 ++++++++++++++++++++++++++++++++----------------------
 1 file changed, 40 insertions(+), 27 deletions(-)

diff --git a/vfio/pci.c b/vfio/pci.c
index 5224fee..3c39844 100644
--- a/vfio/pci.c
+++ b/vfio/pci.c
@@ -1018,30 +1018,7 @@ static int vfio_pci_enable_intx(struct kvm *kvm, struct vfio_device *vdev)
 	struct vfio_irq_eventfd	trigger;
 	struct vfio_irq_eventfd	unmask;
 	struct vfio_pci_device *pdev = &vdev->pci;
-	int gsi = pdev->hdr.irq_line - KVM_IRQ_OFFSET;
-
-	struct vfio_irq_info irq_info = {
-		.argsz = sizeof(irq_info),
-		.index = VFIO_PCI_INTX_IRQ_INDEX,
-	};
-
-	vfio_pci_reserve_irq_fds(2);
-
-	ret = ioctl(vdev->fd, VFIO_DEVICE_GET_IRQ_INFO, &irq_info);
-	if (ret || irq_info.count == 0) {
-		vfio_dev_err(vdev, "no INTx reported by VFIO");
-		return -ENODEV;
-	}
-
-	if (!(irq_info.flags & VFIO_IRQ_INFO_EVENTFD)) {
-		vfio_dev_err(vdev, "interrupt not eventfd capable");
-		return -EINVAL;
-	}
-
-	if (!(irq_info.flags & VFIO_IRQ_INFO_AUTOMASKED)) {
-		vfio_dev_err(vdev, "INTx interrupt not AUTOMASKED");
-		return -EINVAL;
-	}
+	int gsi = pdev->intx_gsi;
 
 	/*
 	 * PCI IRQ is level-triggered, so we use two eventfds. trigger_fd
@@ -1097,8 +1074,6 @@ static int vfio_pci_enable_intx(struct kvm *kvm, struct vfio_device *vdev)
 
 	pdev->intx_fd = trigger_fd;
 	pdev->unmask_fd = unmask_fd;
-	/* Guest is going to ovewrite our irq_line... */
-	pdev->intx_gsi = gsi;
 
 	return 0;
 
@@ -1117,6 +1092,39 @@ err_close:
 	return ret;
 }
 
+static int vfio_pci_init_intx(struct kvm *kvm, struct vfio_device *vdev)
+{
+	int ret;
+	struct vfio_pci_device *pdev = &vdev->pci;
+	struct vfio_irq_info irq_info = {
+		.argsz = sizeof(irq_info),
+		.index = VFIO_PCI_INTX_IRQ_INDEX,
+	};
+
+	vfio_pci_reserve_irq_fds(2);
+
+	ret = ioctl(vdev->fd, VFIO_DEVICE_GET_IRQ_INFO, &irq_info);
+	if (ret || irq_info.count == 0) {
+		vfio_dev_err(vdev, "no INTx reported by VFIO");
+		return -ENODEV;
+	}
+
+	if (!(irq_info.flags & VFIO_IRQ_INFO_EVENTFD)) {
+		vfio_dev_err(vdev, "interrupt not eventfd capable");
+		return -EINVAL;
+	}
+
+	if (!(irq_info.flags & VFIO_IRQ_INFO_AUTOMASKED)) {
+		vfio_dev_err(vdev, "INTx interrupt not AUTOMASKED");
+		return -EINVAL;
+	}
+
+	/* Guest is going to ovewrite our irq_line... */
+	pdev->intx_gsi = pdev->hdr.irq_line - KVM_IRQ_OFFSET;
+
+	return 0;
+}
+
 static int vfio_pci_configure_dev_irqs(struct kvm *kvm, struct vfio_device *vdev)
 {
 	int ret = 0;
@@ -1142,8 +1150,13 @@ static int vfio_pci_configure_dev_irqs(struct kvm *kvm, struct vfio_device *vdev
 			return ret;
 	}
 
-	if (pdev->irq_modes & VFIO_PCI_IRQ_MODE_INTX)
+	if (pdev->irq_modes & VFIO_PCI_IRQ_MODE_INTX) {
+		ret = vfio_pci_init_intx(kvm, vdev);
+		if (ret)
+			return ret;
+
 		ret = vfio_pci_enable_intx(kvm, vdev);
+	}
 
 	return ret;
 }

From patchwork Mon Apr  8 01:27:19 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Leo Yan <leo.yan@linaro.org>
X-Patchwork-Id: 10888709
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id ECFED139A
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon,  8 Apr 2019 01:27:59 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D56A120748
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon,  8 Apr 2019 01:27:59 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C9FBA2864E; Mon,  8 Apr 2019 01:27:59 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham
	version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4ACAE28613
	for <patchwork-kvm@patchwork.kernel.org>;
 Mon,  8 Apr 2019 01:27:59 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726513AbfDHB16 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Sun, 7 Apr 2019 21:27:58 -0400
Received: from mail-yw1-f67.google.com ([209.85.161.67]:44535 "EHLO
        mail-yw1-f67.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726527AbfDHB16 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Sun, 7 Apr 2019 21:27:58 -0400
Received: by mail-yw1-f67.google.com with SMTP id c4so4352716ywa.11
        for <kvm@vger.kernel.org>; Sun, 07 Apr 2019 18:27:57 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references;
        bh=9jMj4zisIi2PTAUSf9rNiwxCUVuPxEzAObjIhEFNUsQ=;
        b=uVhjfmZH5BN7AtgpBxgCNuaXgvIxp2FyOJ5KAtnLsAQKmtND0SiVJIF2W29FSsgj+C
         +H3IzdtwndJik/uDfjKnUyVkTyENTbeYN2oIzULB9woIWZBMIQ9xJDUzHjPnkMXfht9m
         5+Nz3tTvx5owKr0OsXkL7XlJbECEzk9MpQ2vaEGPhptYPAyibbv/pjAYhN9XC5tNUz79
         cc3k0aWWE39sr+VhAKpM76d9sh3S1+VqBd70N0oBq5JXS6k/kbg+8LvlsiY7Q4jO7NEh
         hvtMEkIOFOWUDh8NrEHNpET0VXD3IDODIN1w5FL/F9casKED/D6Oianoo2kzvxghaNU3
         gdPA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references;
        bh=9jMj4zisIi2PTAUSf9rNiwxCUVuPxEzAObjIhEFNUsQ=;
        b=O5fLjf3UYD7peXfZfGnFgtqFE5dTFHIh0XjPTAyta9Fe/cAFXuI9rRGvyGFxu9s8T1
         Luwm+zdvmQgZTKLj8qhuhRx/UsmsoP0IeXcfngRnUEirhk+QvlvH2oKIFkPthc3kNm/x
         qgTsmiotUuT4hl54N86Jsc4IOejIxU08ZpxioZ7R1SzHsnEgCaOXAak0wCfaK+aNqa2k
         vz5tthPF9+BuUblPFYFD1yTzd/3ITVErbMma3vJGjj1tsQmA6LVXhi8XtHJylEgBmrXl
         4fqmoiCNe7Zb7ksedXDnin1Vo+hA2QTSMWDgBYTK2pFrvEkKhijJnw0KF2NM/eAwPEWH
         M/2A==
X-Gm-Message-State: APjAAAVl83O/offT9KTRFkIBWe8L3IFKjtqWjCPWcS/DaeZqXutsUBvb
        vA+f8uD3Yas0DNh3eQlOAMwcfBqF1f81mYMb
X-Google-Smtp-Source: 
 APXvYqyt8WJ2bAhRgvq3AHr/y7EBERk4LqRyLa1Gh4nLELo8/NnIUle1muXyjkwAwMcCQrN5ns0MbA==
X-Received: by 2002:a81:2e83:: with SMTP id
 u125mr20760789ywu.18.1554686876734;
        Sun, 07 Apr 2019 18:27:56 -0700 (PDT)
Received: from localhost.localdomain (li931-65.members.linode.com.
 [45.56.113.65])
        by smtp.gmail.com with ESMTPSA id
 190sm10494919ywd.62.2019.04.07.18.27.53
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Sun, 07 Apr 2019 18:27:55 -0700 (PDT)
From: Leo Yan <leo.yan@linaro.org>
To: "kvm@vger.kernel.org" <kvm@vger.kernel.org>,
        "kvmarm@lists.cs.columbia.edu" <kvmarm@lists.cs.columbia.edu>,
        Will Deacon <Will.Deacon@arm.com>,
        Jean-Philippe Brucker <jean-philippe.brucker@arm.com>,
        Marc Zyngier <Marc.Zyngier@arm.com>,
        Eric Auger <eric.auger@redhat.com>,
        Robin Murphy <Robin.Murphy@arm.com>
Cc: Leo Yan <leo.yan@linaro.org>
Subject: [PATCH v4 3/3] vfio-pci: Re-enable INTx mode when disable MSI/MSIX
Date: Mon,  8 Apr 2019 09:27:19 +0800
Message-Id: <20190408012719.16158-4-leo.yan@linaro.org>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20190408012719.16158-1-leo.yan@linaro.org>
References: <20190408012719.16158-1-leo.yan@linaro.org>
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

Since PCI forbids enabling INTx, MSI or MSIX at the same time, it's by
default to disable INTx mode when enable MSI/MSIX mode; but this logic is
easily broken if the guest PCI driver detects the MSI/MSIX cannot work as
expected and tries to rollback to use INTx mode.  In this case, the INTx
mode has been disabled and has no chance to re-enable it, thus both INTx
mode and MSI/MSIX mode cannot work in vfio.

Below shows the detailed flow for introducing this issue:

  vfio_pci_configure_dev_irqs()
    `-> vfio_pci_enable_intx()

  vfio_pci_enable_msis()
    `-> vfio_pci_disable_intx()

  vfio_pci_disable_msis()   => Guest PCI driver disables MSI

To fix this issue, when disable MSI/MSIX we need to check if INTx mode
is available for this device or not; if the device can support INTx then
re-enable it so that the device can fallback to use it.

Since vfio_pci_disable_intx() / vfio_pci_enable_intx() pair functions
may be called for multiple times, this patch uses 'intx_fd == -1' to
denote the INTx is disabled, the pair functions can directly bail out
when detect INTx has been disabled and enabled respectively.

Suggested-by: Jean-Philippe Brucker <jean-philippe.brucker@arm.com>
Signed-off-by: Leo Yan <leo.yan@linaro.org>
Reviewed-by: Jean-Philippe Brucker <jean-philippe.brucker@arm.com>
---
 vfio/pci.c | 28 ++++++++++++++++++++++------
 1 file changed, 22 insertions(+), 6 deletions(-)

diff --git a/vfio/pci.c b/vfio/pci.c
index 3c39844..f17498e 100644
--- a/vfio/pci.c
+++ b/vfio/pci.c
@@ -28,6 +28,7 @@ struct vfio_irq_eventfd {
 	msi_update_state(state, val, VFIO_PCI_MSI_STATE_EMPTY)
 
 static void vfio_pci_disable_intx(struct kvm *kvm, struct vfio_device *vdev);
+static int vfio_pci_enable_intx(struct kvm *kvm, struct vfio_device *vdev);
 
 static int vfio_pci_enable_msis(struct kvm *kvm, struct vfio_device *vdev,
 				bool msix)
@@ -50,17 +51,14 @@ static int vfio_pci_enable_msis(struct kvm *kvm, struct vfio_device *vdev,
 	if (!msi_is_enabled(msis->virt_state))
 		return 0;
 
-	if (pdev->irq_modes & VFIO_PCI_IRQ_MODE_INTX) {
+	if (pdev->irq_modes & VFIO_PCI_IRQ_MODE_INTX)
 		/*
 		 * PCI (and VFIO) forbids enabling INTx, MSI or MSIX at the same
 		 * time. Since INTx has to be enabled from the start (we don't
-		 * have a reliable way to know when the user starts using it),
+		 * have a reliable way to know when the guest starts using it),
 		 * disable it now.
 		 */
 		vfio_pci_disable_intx(kvm, vdev);
-		/* Permanently disable INTx */
-		pdev->irq_modes &= ~VFIO_PCI_IRQ_MODE_INTX;
-	}
 
 	eventfds = (void *)msis->irq_set + sizeof(struct vfio_irq_set);
 
@@ -162,7 +160,16 @@ static int vfio_pci_disable_msis(struct kvm *kvm, struct vfio_device *vdev,
 	msi_set_enabled(msis->phys_state, false);
 	msi_set_empty(msis->phys_state, true);
 
-	return 0;
+	/*
+	 * When MSI or MSIX is disabled, this might be called when
+	 * PCI driver detects the MSI interrupt failure and wants to
+	 * rollback to INTx mode.  Thus enable INTx if the device
+	 * supports INTx mode in this case.
+	 */
+	if (pdev->irq_modes & VFIO_PCI_IRQ_MODE_INTX)
+		ret = vfio_pci_enable_intx(kvm, vdev);
+
+	return ret >= 0 ? 0 : ret;
 }
 
 static int vfio_pci_update_msi_entry(struct kvm *kvm, struct vfio_device *vdev,
@@ -1002,6 +1009,9 @@ static void vfio_pci_disable_intx(struct kvm *kvm, struct vfio_device *vdev)
 		.index	= VFIO_PCI_INTX_IRQ_INDEX,
 	};
 
+	if (pdev->intx_fd == -1)
+		return;
+
 	pr_debug("user requested MSI, disabling INTx %d", gsi);
 
 	ioctl(vdev->fd, VFIO_DEVICE_SET_IRQS, &irq_set);
@@ -1009,6 +1019,7 @@ static void vfio_pci_disable_intx(struct kvm *kvm, struct vfio_device *vdev)
 
 	close(pdev->intx_fd);
 	close(pdev->unmask_fd);
+	pdev->intx_fd = -1;
 }
 
 static int vfio_pci_enable_intx(struct kvm *kvm, struct vfio_device *vdev)
@@ -1020,6 +1031,9 @@ static int vfio_pci_enable_intx(struct kvm *kvm, struct vfio_device *vdev)
 	struct vfio_pci_device *pdev = &vdev->pci;
 	int gsi = pdev->intx_gsi;
 
+	if (pdev->intx_fd != -1)
+		return 0;
+
 	/*
 	 * PCI IRQ is level-triggered, so we use two eventfds. trigger_fd
 	 * signals an interrupt from host to guest, and unmask_fd signals the
@@ -1122,6 +1136,8 @@ static int vfio_pci_init_intx(struct kvm *kvm, struct vfio_device *vdev)
 	/* Guest is going to ovewrite our irq_line... */
 	pdev->intx_gsi = pdev->hdr.irq_line - KVM_IRQ_OFFSET;
 
+	pdev->intx_fd = -1;
+
 	return 0;
 }
 
